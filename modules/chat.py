import logging
import time
import random
from telegram import Update
from telegram.ext import CallbackContext, CommandHandler, MessageHandler, filters
from database.firestore import FirestoreClient
from config.settings import settings
import google.generativeai as genai

logger = logging.getLogger(__name__)

genai.configure(api_key=settings.gemini_api_key)
FALLBACK_RESPONSES = [
    "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi l·∫°i kh√¥ng?",
    "Hmm, t√¥i ch∆∞a bi·∫øt c√°ch tr·∫£ l·ªùi c√¢u n√†y. H√£y th·ª≠ h·ªèi theo c√°ch kh√°c nh√©!",
    "T√¥i ƒëang g·∫∑p ch√∫t kh√≥ khƒÉn. B·∫°n c√≥ th·ªÉ cung c·∫•p th√™m th√¥ng tin kh√¥ng?",
]
GEMINI_RATE_LIMIT = 50
gemini_call_count = 0
last_reset_time = time.time()

async def start(update: Update, context: CallbackContext) -> None:
    try:
        welcome_message = (
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CotienBot! ü§ñ\n"
            "T√¥i l√† tr·ª£ l√Ω c√° nh√¢n c·ªßa b·∫°n, c√≥ th·ªÉ tr√≤ chuy·ªán v√† h·ªçc h·ªèi t·ª´ d·ªØ li·ªáu b·∫°n cung c·∫•p.\n"
            "D√πng /help ƒë·ªÉ xem danh s√°ch l·ªánh."
        )
        await update.message.reply_text(welcome_message)
        logger.info(f"G·ª≠i tin nh·∫Øn ch√†o m·ª´ng t·ªõi user {update.message.from_user.id}")
    except Exception as e:
        logger.error(f"L·ªói trong start: {str(e)}", exc_info=True)
        await update.message.reply_text("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!")

async def help_command(update: Update, context: CallbackContext) -> None:
    try:
        help_message = (
            "Danh s√°ch l·ªánh:\n"
            "/start - Kh·ªüi ƒë·ªông bot\n"
            "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
            "/train <th√¥ng tin> - Hu·∫•n luy·ªán bot v·ªõi th√¥ng tin c·ªßa b·∫°n\n"
            "Ho·∫∑c b·∫°n c√≥ th·ªÉ tr√≤ chuy·ªán t·ª± nhi√™n v·ªõi t√¥i!"
        )
        await update.message.reply_text(help_message)
        logger.info(f"G·ª≠i tin nh·∫Øn tr·ª£ gi√∫p t·ªõi user {update.message.from_user.id}")
    except Exception as e:
        logger.error(f"L·ªói trong help_command: {str(e)}", exc_info=True)
        await update.message.reply_text("Xin l·ªói, ƒë√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i!")

async def train_command(update: Update, context: CallbackContext) -> None:
    try:
        user_id = str(update.message.from_user.id)
        info = " ".join(context.args) if context.args else None
        if not info:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p th√¥ng tin ƒë·ªÉ hu·∫•n luy·ªán. V√≠ d·ª•: /train t√¥i t√™n l√† Vinh")
            logger.info(f"User {user_id} kh√¥ng cung c·∫•p th√¥ng tin hu·∫•n luy·ªán")
            return

        db = FirestoreClient()
        result = db.save_training_data(user_id, info)
        if result == "buffered":
            await update.message.reply_text(f"ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán: {info} (ID: {result})")
            logger.info(f"ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán cho user {user_id}: {info}")
        else:
            await update.message.reply_text("ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán th√†nh c√¥ng!")
            logger.info(f"ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán tr·ª±c ti·∫øp cho user {user_id}: {info}")
    except Exception as e:
        logger.error(f"L·ªói trong train_command: {str(e)}", exc_info=True)
        await update.message.reply_text("Xin l·ªói, ƒë√£ c√≥ l·ªói khi l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán. Vui l√≤ng th·ª≠ l·∫°i!")

def get_gemini_model():
    return genai.GenerativeModel("gemini-1.5-flash")

async def handle_message(update: Update, context: CallbackContext) -> None:
    try:
        start_time = time.time()
        user_id = str(update.message.from_user.id)
        message = update.message.text
        logger.info(f"Received message from user {user_id}: {message}")

        db = FirestoreClient()

        # Ki·ªÉm tra l·ªãch s·ª≠ tr√≤ chuy·ªán
        similar_chat = db.get_similar_chat(user_id, message)
        if similar_chat:
            response = similar_chat["response"]
            await update.message.reply_text(response)
            logger.info(f"Tr·∫£ l·ªùi t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán cho user {user_id}: {response}")
            logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
            return

        # L·∫•y d·ªØ li·ªáu hu·∫•n luy·ªán ƒë√£ l·ªçc
        training_data = db.get_training_data(user_id, message)
        training_context = []
        if training_data:
            training_context = [item["info"] for item in training_data]
        training_context_str = "\n".join([f"Ng∆∞·ªùi d√πng ƒë√£ hu·∫•n luy·ªán: {info}" for info in training_context])

        # Ki·ªÉm tra gi·ªõi h·∫°n Gemini API
        global gemini_call_count, last_reset_time
        current_time = time.time()
        if current_time - last_reset_time >= 60:
            gemini_call_count = 0
            last_reset_time = current_time
        if gemini_call_count >= GEMINI_RATE_LIMIT:
            await update.message.reply_text("ƒê√£ ƒë·∫°t gi·ªõi h·∫°n y√™u c·∫ßu Gemini. Vui l√≤ng th·ª≠ l·∫°i sau!")
            logger.warning(f"ƒê√£ ƒë·∫°t gi·ªõi h·∫°n Gemini API cho user {user_id}")
            logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
            return

        # Ki·ªÉm tra cache Gemini
        gemini_cache_key = f"{user_id}:{message}"
        if hasattr(db, "gemini_cache") and gemini_cache_key in db.gemini_cache:
            response = db.gemini_cache[gemini_cache_key]
            await update.message.reply_text(f"[Gemini] {response}")
            logger.info(f"Tr·∫£ l·ªùi t·ª´ cache Gemini cho user {user_id}: {response}")
            logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
            return

        # L·∫•y ng·ªØ c·∫£nh t·ª´ l·ªãch s·ª≠ tr√≤ chuy·ªán g·∫ßn ƒë√¢y
        doc = db.client.collection("chat_history").document(user_id).get()
        context_messages = []
        if doc.exists:
            chats = doc.to_dict().get("chats", [])
            context_messages = [f"User: {chat['message']}\nBot: {chat['response']}" for chat in chats[-3:]]
        context_str = "\n".join(context_messages)

        # G·ªçi Gemini v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc
        logger.info(f"G·ªçi Gemini cho user {user_id} v·ªõi d·ªØ li·ªáu ƒë√£ l·ªçc")
        gemini_model = get_gemini_model()
        prompt = (
            "B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh. D·ª±a tr√™n d·ªØ li·ªáu hu·∫•n luy·ªán v√† l·ªãch s·ª≠ tr√≤ chuy·ªán, h√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch t·ª± nhi√™n v√† ch√≠nh x√°c.\n\n"
            f"D·ªØ li·ªáu hu·∫•n luy·ªán:\n{training_context_str}\n\n"
            f"L·ªãch s·ª≠ tr√≤ chuy·ªán:\n{context_str}\n\n"
            f"C√¢u h·ªèi: {message}\n\n"
            "Tr·∫£ l·ªùi:"
        )
        from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
        @retry(
            stop=stop_after_attempt(3),
            wait=wait_fixed(2),
            retry=retry_if_exception_type(Exception),
            before_sleep=lambda retry_state: logger.info(f"Retry Gemini API: attempt {retry_state.attempt_number}")
        )
        def call_gemini_with_timeout():
            import signal
            def timeout_handler(signum, frame):
                raise TimeoutError("Timeout of 10s exceeded")
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(10)
            try:
                return gemini_model.generate_content(prompt).text
            finally:
                signal.alarm(0)

        try:
            response = call_gemini_with_timeout()
        except Exception as e:
            logger.error(f"L·ªói khi g·ªçi Gemini API: {str(e)}")
            response = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi ngay b√¢y gi·ªù. H√£y th·ª≠ l·∫°i sau!"
            await update.message.reply_text(response)
            logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
            return
        gemini_call_count += 1

        # Cache k·∫øt qu·∫£ Gemini
        if not hasattr(db, "gemini_cache"):
            db.gemini_cache = {}
            db.gemini_cache_max_size = 1000
        if len(db.gemini_cache) >= db.gemini_cache_max_size:
            db.gemini_cache.clear()
        db.gemini_cache[gemini_cache_key] = response

        await update.message.reply_text(f"[Gemini] {response}")
        db.save_chat(user_id, message, response, is_gemini=True)
        logger.info(f"Tr·∫£ l·ªùi t·ª´ Gemini cho user {user_id}: {response}")
        logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
    except Exception as e:
        logger.error(f"L·ªói trong handle_message: {str(e)}", exc_info=True)
        fallback_response = random.choice(FALLBACK_RESPONSES)
        await update.message.reply_text(fallback_response)
        logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {time.time() - start_time:.2f} gi√¢y")
