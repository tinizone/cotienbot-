from telegram import Update
from telegram.ext import CallbackContext
import html
import logging
from database.firestore import FirestoreClient
from modules.learning.quiz import QuizManager
from modules.learning.course import CourseManager
from modules.media.speech import SpeechProcessor

logger = logging.getLogger(__name__)
firestore_client = FirestoreClient()
quiz_manager = QuizManager()
course_manager = CourseManager()

async def start(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /start."""
    try:
        user_id = str(update.message.from_user.id)
        user_data = firestore_client.get_user(user_id)
        if user_data is None:
            firestore_client.save_user(user_id, {
                "name": update.message.from_user.first_name,
                "created_at": firestore_client.SERVER_TIMESTAMP
            })
        await update.message.reply_text(
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CotienBot! ü§ñ\n"
            "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr√≤ chuy·ªán, h·ªçc t·∫≠p, v√† h∆°n th·∫ø n·ªØa.\n"
            "D√πng /help ƒë·ªÉ xem danh s√°ch l·ªánh."
        )
    except Exception as e:
        logger.error(f"L·ªói trong start: {str(e)}")
        await update.message.reply_text("L·ªói khi kh·ªüi ƒë·ªông bot. Vui l√≤ng th·ª≠ l·∫°i.")

async def help_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /help."""
    try:
        help_text = (
            "Danh s√°ch l·ªánh:\n"
            "/start - Kh·ªüi ƒë·ªông bot\n"
            "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
            "/train - Hu·∫•n luy·ªán bot v·ªõi d·ªØ li·ªáu\n"
            "/createquiz - T·∫°o quiz\n"
            "/takequiz - Tham gia quiz\n"
            "/createcourse - T·∫°o kh√≥a h·ªçc\n"
            "/crawl - Crawl d·ªØ li·ªáu t·ª´ RSS\n"
            "/listcourses - Li·ªát k√™ kh√≥a h·ªçc\n"
            "/setadmin - ƒê·∫∑t admin (y√™u c·∫ßu quy·ªÅn)\n"
            "/getid - L·∫•y ID ng∆∞·ªùi d√πng"
        )
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"L·ªói trong help_command: {str(e)}")
        await update.message.reply_text("L·ªói khi hi·ªÉn th·ªã tr·ª£ gi√∫p. Vui l√≤ng th·ª≠ l·∫°i.")

async def train_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /train."""
    try:
        user_id = str(update.message.from_user.id)
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán, v√≠ d·ª•: /train Xin ch√†o")
            return
        info = " ".join(context.args)
        doc_id = firestore_client.save_training_data(user_id, info, "general")
        await update.message.reply_text(f"ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán: {html.escape(info)} (ID: {doc_id})")
    except Exception as e:
        logger.error(f"L·ªói trong train_command: {str(e)}")
        await update.message.reply_text("L·ªói khi hu·∫•n luy·ªán. Vui l√≤ng th·ª≠ l·∫°i.")

async def create_quiz_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /createquiz."""
    try:
        user_id = str(update.message.from_user.id)
        quiz_id = quiz_manager.create_quiz(user_id)
        await update.message.reply_text(f"ƒê√£ t·∫°o quiz v·ªõi ID: {quiz_id}")
    except Exception as e:
        logger.error(f"L·ªói trong create_quiz_command: {str(e)}")
        await update.message.reply_text("L·ªói khi t·∫°o quiz. Vui l√≤ng th·ª≠ l·∫°i.")

async def take_quiz_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /takequiz."""
    try:
        user_id = str(update.message.from_user.id)
        result = quiz_manager.take_quiz(user_id)
        await update.message.reply_text(result)
    except Exception as e:
        logger.error(f"L·ªói trong take_quiz_command: {str(e)}")
        await update.message.reply_text("L·ªói khi tham gia quiz. Vui l√≤ng th·ª≠ l·∫°i.")

async def create_course_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /createcourse."""
    try:
        user_id = str(update.message.from_user.id)
        course_id = course_manager.create_course(user_id)
        await update.message.reply_text(f"ƒê√£ t·∫°o kh√≥a h·ªçc v·ªõi ID: {course_id}")
    except Exception as e:
        logger.error(f"L·ªói trong create_course_command: {str(e)}")
        await update.message.reply_text("L·ªói khi t·∫°o kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.")

async def crawl_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /crawl."""
    try:
        await update.message.reply_text("T√≠nh nƒÉng crawl RSS s·∫Ω s·ªõm ra m·∫Øt! üï∑Ô∏è")
    except Exception as e:
        logger.error(f"L·ªói trong crawl_command: {str(e)}")
        await update.message.reply_text("L·ªói khi crawl d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")

async def list_courses_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /listcourses."""
    try:
        courses $

---

### 3. C√°c File Kh√°c (Gi·∫£ ƒê·ªãnh)

#### `/config/settings.py`
T√¥i gi·∫£ ƒë·ªãnh b·∫°n c√≥ file n√†y ƒë·ªÉ qu·∫£n l√Ω c·∫•u h√¨nh (d·ª±a tr√™n c√°c import trong `main.py`). N·∫øu kh√¥ng, b·∫°n c·∫ßn t·∫°o file n√†y.

```python
from pydantic_settings import BaseSettings
from dotenv import load_dotenv

load_dotenv()

class Settings(BaseSettings):
    telegram_token: str
    render_domain: str
    firestore_credentials: str
    admin_user_id: str

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"

settings = Settings()
