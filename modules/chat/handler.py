from telegram import Update
from telegram.ext import CallbackContext
import html
import logging
from database.firestore import FirestoreClient
from modules.learning.quiz import QuizManager
from modules.learning.course import CourseManager
from modules.media.speech import SpeechProcessor

logger = logging.getLogger(__name__)
firestore_client = FirestoreClient()
quiz_manager = QuizManager()
course_manager = CourseManager()

async def start(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /start."""
    try:
        user_id = str(update.message.from_user.id)
        user_data = firestore_client.get_user(user_id)
        if user_data is None:
            firestore_client.save_user(user_id, {
                "name": update.message.from_user.first_name,
                "created_at": firestore_client.SERVER_TIMESTAMP
            })
        await update.message.reply_text(
            "Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi CotienBot! ü§ñ\n"
            "T√¥i c√≥ th·ªÉ gi√∫p b·∫°n tr√≤ chuy·ªán, h·ªçc t·∫≠p, v√† h∆°n th·∫ø n·ªØa.\n"
            "D√πng /help ƒë·ªÉ xem danh s√°ch l·ªánh."
        )
    except Exception as e:
        logger.error(f"L·ªói trong start: {str(e)}")
        await update.message.reply_text("L·ªói khi kh·ªüi ƒë·ªông bot. Vui l√≤ng th·ª≠ l·∫°i.")

async def help_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /help."""
    try:
        help_text = (
            "Danh s√°ch l·ªánh:\n"
            "/start - Kh·ªüi ƒë·ªông bot\n"
            "/help - Hi·ªÉn th·ªã tr·ª£ gi√∫p\n"
            "/train - Hu·∫•n luy·ªán bot v·ªõi d·ªØ li·ªáu\n"
            "/createquiz - T·∫°o quiz\n"
            "/takequiz - Tham gia quiz\n"
            "/createcourse - T·∫°o kh√≥a h·ªçc\n"
            "/crawl - Crawl d·ªØ li·ªáu t·ª´ RSS\n"
            "/listcourses - Li·ªát k√™ kh√≥a h·ªçc\n"
            "/setadmin - ƒê·∫∑t admin (y√™u c·∫ßu quy·ªÅn)\n"
            "/getid - L·∫•y ID ng∆∞·ªùi d√πng"
        )
        await update.message.reply_text(help_text)
    except Exception as e:
        logger.error(f"L·ªói trong help_command: {str(e)}")
        await update.message.reply_text("L·ªói khi hi·ªÉn th·ªã tr·ª£ gi√∫p. Vui l√≤ng th·ª≠ l·∫°i.")

async def train_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /train."""
    try:
        user_id = str(update.message.from_user.id)
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p d·ªØ li·ªáu ƒë·ªÉ hu·∫•n luy·ªán, v√≠ d·ª•: /train Xin ch√†o")
            return
        info = " ".join(context.args)
        doc_id = firestore_client.save_training_data(user_id, info, "general")
        await update.message.reply_text(f"ƒê√£ l∆∞u d·ªØ li·ªáu hu·∫•n luy·ªán: {html.escape(info)} (ID: {doc_id})")
    except Exception as e:
        logger.error(f"L·ªói trong train_command: {str(e)}")
        await update.message.reply_text("L·ªói khi hu·∫•n luy·ªán. Vui l√≤ng th·ª≠ l·∫°i.")

async def create_quiz_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /createquiz."""
    try:
        user_id = str(update.message.from_user.id)
        quiz_id = quiz_manager.create_quiz(user_id)
        await update.message.reply_text(f"ƒê√£ t·∫°o quiz v·ªõi ID: {quiz_id}\nS·ª≠ d·ª•ng /takequiz ƒë·ªÉ tham gia!")
    except Exception as e:
        logger.error(f"L·ªói trong create_quiz_command: {str(e)}")
        await update.message.reply_text("L·ªói khi t·∫°o quiz. Vui l√≤ng th·ª≠ l·∫°i.")

async def take_quiz_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /takequiz."""
    try:
        user_id = str(update.message.from_user.id)
        result = quiz_manager.take_quiz(user_id)
        await update.message.reply_text(result)
    except Exception as e:
        logger.error(f"L·ªói trong take_quiz_command: {str(e)}")
        await update.message.reply_text("L·ªói khi tham gia quiz. Vui l√≤ng th·ª≠ l·∫°i.")

async def create_course_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /createcourse."""
    try:
        user_id = str(update.message.from_user.id)
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p t√™n kh√≥a h·ªçc, v√≠ d·ª•: /createcourse Python C∆° B·∫£n")
            return
        course_name = " ".join(context.args)
        course_id = course_manager.create_course(user_id, course_name)
        await update.message.reply_text(f"ƒê√£ t·∫°o kh√≥a h·ªçc v·ªõi ID: {course_id}\nT√™n: {course_name}")
    except Exception as e:
        logger.error(f"L·ªói trong create_course_command: {str(e)}")
        await update.message.reply_text("L·ªói khi t·∫°o kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.")

async def crawl_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /crawl."""
    try:
        await update.message.reply_text("T√≠nh nƒÉng crawl RSS s·∫Ω s·ªõm ra m·∫Øt! üï∑Ô∏è")
    except Exception as e:
        logger.error(f"L·ªói trong crawl_command: {str(e)}")
        await update.message.reply_text("L·ªói khi crawl d·ªØ li·ªáu. Vui l√≤ng th·ª≠ l·∫°i.")

async def list_courses_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /listcourses."""
    try:
        user_id = str(update.message.from_user.id)
        courses = course_manager.list_courses(user_id)
        if not courses:
            await update.message.reply_text("Ch∆∞a c√≥ kh√≥a h·ªçc n√†o. T·∫°o m·ªõi b·∫±ng /createcourse!")
            return
        await update.message.reply_text("Danh s√°ch kh√≥a h·ªçc:\n" + "\n".join(courses))
    except Exception as e:
        logger.error(f"L·ªói trong list_courses_command: {str(e)}")
        await update.message.reply_text("L·ªói khi li·ªát k√™ kh√≥a h·ªçc. Vui l√≤ng th·ª≠ l·∫°i.")

async def set_admin_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /setadmin."""
    try:
        user_id = str(update.message.from_user.id)
        user_data = firestore_client.get_user(user_id)
        if not user_data or user_data.get("role") != "admin":
            await update.message.reply_text("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y!")
            return
        if not context.args:
            await update.message.reply_text("Vui l√≤ng cung c·∫•p ID ng∆∞·ªùi d√πng ƒë·ªÉ ƒë·∫∑t l√†m admin, v√≠ d·ª•: /setadmin 123456789")
            return
        target_user_id = context.args[0]
        firestore_client.set_admin(target_user_id, "Admin")
        await update.message.reply_text(f"ƒê√£ ƒë·∫∑t ng∆∞·ªùi d√πng {target_user_id} l√†m admin!")
    except Exception as e:
        logger.error(f"L·ªói trong set_admin_command: {str(e)}")
        await update.message.reply_text("L·ªói khi ƒë·∫∑t admin. Vui l√≤ng th·ª≠ l·∫°i.")

async def get_id_command(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω l·ªánh /getid."""
    try:
        user_id = str(update.message.from_user.id)
        await update.message.reply_text(f"ID c·ªßa b·∫°n l√†: {user_id}")
    except Exception as e:
        logger.error(f"L·ªói trong get_id_command: {str(e)}")
        await update.message.reply_text("L·ªói khi l·∫•y ID. Vui l√≤ng th·ª≠ l·∫°i.")

async def handle_message(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n."""
    try:
        user_id = str(update.message.from_user.id)
        message = html.escape(update.message.text)
        response = f"Echo: {message}"  # Thay th·∫ø b·∫±ng logic x·ª≠ l√Ω AI n·∫øu c·∫ßn
        firestore_client.save_chat(user_id, message, response)
        await update.message.reply_text(response)
    except Exception as e:
        logger.error(f"L·ªói trong handle_message: {str(e)}")
        await update.message.reply_text("L·ªói khi x·ª≠ l√Ω tin nh·∫Øn. Vui l√≤ng th·ª≠ l·∫°i.")

async def handle_media(update: Update, context: CallbackContext) -> None:
    """X·ª≠ l√Ω tin nh·∫Øn media (gi·ªçng n√≥i, ·∫£nh, video)."""
    try:
        user_id = str(update.message.from_user.id)
        if update.message.photo:
            await update.message.reply_text("T√≠nh nƒÉng x·ª≠ l√Ω ·∫£nh s·∫Ω s·ªõm ra m·∫Øt! üì∏")
        elif update.message.video:
            await update.message.reply_text("T√≠nh nƒÉng x·ª≠ l√Ω video s·∫Ω s·ªõm ra m·∫Øt! üé•")
        elif update.message.voice:
            voice = update.message.voice
            file = await voice.get_file()
            audio_data = await file.download_as_bytearray()
            speech = SpeechProcessor()
            result = await speech.speech_to_text(audio_data)
            if result["status"] == "success":
                text = html.escape(result["text"])
                doc_id = firestore_client.save_training_data(user_id, text, "speech")
                await update.message.reply_text(f"ƒê√£ l∆∞u gi·ªçng n√≥i: {text} (ID: {doc_id})")
            else:
                await update.message.reply_text(f"L·ªói: {result['message']}")
    except Exception as e:
        logger.error(f"L·ªói trong handle_media: {str(e)}")
        await update.message.reply_text("L·ªói khi x·ª≠ l√Ω media. Vui l√≤ng th·ª≠ l·∫°i.")
